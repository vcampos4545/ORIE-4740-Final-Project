df <- subset(df, Acidity != -1 & Year > 1950 & Country != "Mexico")
df <- read.csv("WineData.csv")
df
df <- read.csv("WineData.csv")
df <- na.omit(df)
df <- subset(df, select = -c(X, Id, Name, Winery, StyleName, Region))
df <- subset(df, Acidity != -1 & Country != "Mexico")
df <- dummy_cols(df, select_columns = 'Type')
df <- dummy_cols(df, select_columns = 'Vintage')
df <- dummy_cols(df, select_columns = 'Nat')
library(dplyr)
library(glmnet)
library(boot)
library(leaps)
library(Matrix)
library(pls)
library(fastDummies)
df <- read.csv("WineData.csv")
df <- na.omit(df)
df <- subset(df, select = -c(X, Id, Name, Winery, StyleName, Region))
df <- subset(df, Acidity != -1 & Country != "Mexico")
df <- dummy_cols(df, select_columns = 'Type')
df <- dummy_cols(df, select_columns = 'Vintage')
df <- dummy_cols(df, select_columns = 'Nat')
df <- dummy_cols(df, select_columns = 'Country')
df <- dummy_cols(df, select_columns = 'Size')
df <- subset(df, select = -c(Type, Vintage, Nat, Country, Size))
df.Pricelm <- lm(Price ~ ., data=df)
df.Ratinglm <- lm(Rating ~ ., data = df)
dfPriceRes <- rstudent(df.Pricelm)
dfRatingRes <- rstudent(df.Ratinglm)
dfPrice.post <- df[abs(dfPriceRes) < 3,]
dfRating.post <- df[abs(dfRatingRes) < 3,]
dfPrice.post <- na.omit(dfPrice.post)
dfRating.post <- na.omit(dfRating.post)
df <- read.csv("WineData.csv")
df <- na.omit(df)
df <- subset(df, select = -c(X, Id, Name, Winery, StyleName, Region))
df <- subset(df, Acidity != -1 & Year > 1950 & Country != "Mexico")
df <- dummy_cols(df, select_columns = 'Type')
df <- dummy_cols(df, select_columns = 'Vintage')
df <- dummy_cols(df, select_columns = 'Nat')
df <- dummy_cols(df, select_columns = 'Country')
df <- dummy_cols(df, select_columns = 'Size')
df <- subset(df, select = -c(Type, Vintage, Nat, Country, Size))
df.Pricelm <- lm(Price ~ ., data=df)
df.Ratinglm <- lm(Rating ~ ., data = df)
dfPriceRes <- rstudent(df.Pricelm)
dfRatingRes <- rstudent(df.Ratinglm)
dfPrice.post <- df[abs(dfPriceRes) < 3,]
dfRating.post <- df[abs(dfRatingRes) < 3,]
dfPrice.post <- na.omit(dfPrice.post)
dfRating.post <- na.omit(dfRating.post)
hist(dfPrice.post$Price, plot = TRUE, breaks = 300, xlim = c(1,100))
hist(dfRating.post$Rating)
pairs(dfPrice.post)
set.seed(1)
trainPrice <- sample(1:nrow(dfPrice.post), nrow(dfPrice.post) * 0.6)
trainRating <- sample(1:nrow(dfRating.post), nrow(dfRating.post) * 0.6)
Price_lm.fit <- lm(Price ~ ., data = dfPrice.post, subset = trainPrice)
Rating_lm.fit <- lm(Rating ~ ., data = dfRating.post, subset = trainRating)
dfPrice.post_test <- dfPrice.post[-trainPrice,]
dfRating.post_test <- dfRating.post[-trainRating,]
Price.predict <- predict.lm(Price_lm.fit, dfPrice.post_test, type= "response")
Rating.predict <- predict.lm(Rating_lm.fit, dfRating.post_test, type="response")
mean((dfPrice.post_test$Price - Price.predict)^2)
mean((dfRating.post_test$Rating - Rating.predict)^2)
Price_resid <- dfPrice.post_test$Price - Price.predict
Rating_resid <- dfRating.post_test$Rating - Rating.predict
plot(dfPrice.post_test$Price, Price_resid, xlab = "Fitted values", ylab = "Residuals", main = "Price Response")
plot(dfRating.post_test$Rating, Rating_resid, xlab = "Fitted values", ylab = "Residuals", main = "Rating Response")
plot(dfPrice.post_test$Price, Price_resid, xlab = "Fitted values", ylab = "Residuals", main = "Price Response")
plot(dfRating.post_test$Rating, Rating_resid, xlab = "Fitted values", ylab = "Residuals", main = "Rating Response")
Price_lm.transform_fit <- lm(log(Price) ~ ., data = dfPrice.post, subset = trainPrice)
Rating_lm.transform_fit <- lm(log(Rating) ~ ., data = dfRating.post, subset = trainRating)
Price.predict_transform <- predict.lm(Price_lm.transform_fit, dfPrice.post_test, type= "response")
Rating.predict_transform <- predict.lm(Rating_lm.transform_fit, dfRating.post_test, type="response")
Price_resid.transform <- dfPrice.post_test$Price - Price.predict_transform
Rating_resid.transform <- dfRating.post_test$Rating - Rating.predict_transform
plot(dfPrice.post_test$Price, Price_resid.transform, xlab = "Fitted values", ylab = "Residuals", main = "Price Response")
plot(dfRating.post_test$Rating, Rating_resid.transform, xlab = "Fitted values", ylab = "Residuals", main = "Rating Response")
plot(dfPrice.post_test$Price, Price_resid.transform, xlab = "Fitted values", ylab = "Residuals", main = "log(Price) Response")
plot(dfRating.post_test$Rating, Rating_resid.transform, xlab = "Fitted values", ylab = "Residuals", main = "log(Rating) Response")
mean((dfPrice.post_test$Price - Price.predict_transform)^2)
mean((dfRating.post_test$Rating - Rating.predict_transform)^2)
mean((Price_resid.transform)^2)
mean((Rating_resid.transform)^2)
summary(Price_lm.transform_fit)
summary(Rating_lm.transform_fit)
summary(Price_lm.transform_fit)
Price <- dfPrice.post[1]
dfPrice.post <- as.data.frame(scale(dfPrice.post[2:11]))
dfPrice.post <- cbind(Price, dfPrice.post)
Price_regfit.full <- regsubsets(Price ~ ., data = dfPrice.post, nvmax = 30)
Rating_regfit.full <- regsubsets(Rating ~ ., data = dfRating.post, nvmax = 30)
plot(summary(Price_regfit.full)$adjr2, type="b", xlab="p", ylab=expression(R^2))
Price_regfit.full <- regsubsets(log(Price) ~ ., data = dfPrice.post, nvmax = 30)
plot(summary(Price_regfit.full)$adjr2, type="b", xlab="p", ylab=expression(R^2))
Rating_regfit.full <- regsubsets(log(Rating) ~ ., data = dfRating.post, nvmax = 30)
Price_lm.fit <- glm(Price ~ ., data = dfPrice.post, subset = trainPrice)
Price_lm.fit <- glm(Price ~ ., data = dfPrice.post)
cv.glm(dfPrice.post, Price_lm.fit)$delta[1]
#Price_lm.transform_fit <- lm(log(Price) ~ ., data = dfPrice.post, subset = trainPrice)
Price_lm.transform_fit <- glm(log(Price) ~ ., data = dfPrice.post)
cv.glm(dfPrice.post, Price_lm.transform_fit)$delta[1]
warnings()
#Rating_lm.transform_fit <- lm(log(Rating) ~ ., data = dfRating.post, subset = trainRating)
Rating_lm.transform_fit <- glm(log(Rating) ~ ., data = dfRating.post)
cv.glm(dfRating.post, Rating_lm.transform_fit)$delta[1]
summary(Price_lm.transform_fit)
Price_lm.fit <- glm(Price ~ ., data = dfPrice.post)
summary(Price_lm.fit)
df <- read.csv("WineData.csv")
df <- na.omit(df)
df <- subset(df, select = -c(X, Id, Name, Winery, StyleName, Region))
df <- subset(df, Acidity != -1 & Year > 1950 & Country != "Mexico")
df <- dummy_cols(df, select_columns = 'Type')
df <- dummy_cols(df, select_columns = 'Vintage')
df <- dummy_cols(df, select_columns = 'Nat')
df <- dummy_cols(df, select_columns = 'Country')
df <- dummy_cols(df, select_columns = 'Size')
df <- subset(df, select = -c(Type, Vintage, Nat, Country, Size))
df.Pricelm <- lm(Price ~ ., data=df)
df.Ratinglm <- lm(Rating ~ ., data = df)
dfPriceRes <- rstudent(df.Pricelm)
dfRatingRes <- rstudent(df.Ratinglm)
dfPrice.post <- df[abs(dfPriceRes) < 3,]
dfRating.post <- df[abs(dfRatingRes) < 3,]
dfPrice.post <- na.omit(dfPrice.post)
dfRating.post <- na.omit(dfRating.post)
Price_lm.fit <- glm(Price ~ ., data = dfPrice.post)
summary(Price_lm.fit)
#Price_lm.transform_fit <- lm(log(Price) ~ ., data = dfPrice.post, subset = trainPrice)
Price_lm.transform_fit <- glm(log(Price) ~ ., data = dfPrice.post)
summary(Price_lm.transform_fit)
Price_lm.transform_fit$R
Price_lm.transform_fit$rank
trainPrice <- sample(1:nrow(dfPrice.post), nrow(dfPrice.post) * 0.6)
trainRating <- sample(1:nrow(dfRating.post), nrow(dfRating.post) * 0.6)
Price_lm.fit <- glm(Price ~ ., data = dfPrice.post)
Rating_lm.fit <- lm(Rating ~ ., data = dfRating.post, subset = trainRating)
dfPrice.post_test <- dfPrice.post[-trainPrice,]
dfRating.post_test <- dfRating.post[-trainRating,]
Price.predict <- predict.lm(Price_lm.fit, dfPrice.post_test, type= "response")
Rating.predict <- predict.lm(Rating_lm.fit, dfRating.post_test, type="response")
mean((dfPrice.post_test$Price - Price.predict)^2)
mean((dfRating.post_test$Rating - Rating.predict)^2)
Price_resid <- dfPrice.post_test$Price - Price.predict
Rating_resid <- dfRating.post_test$Rating - Rating.predict
plot(dfPrice.post_test$Price, Price_resid, xlab = "Fitted values", ylab = "Residuals", main = "Price Response")
plot(dfRating.post_test$Rating, Rating_resid, xlab = "Fitted values", ylab = "Residuals", main = "Rating Response")
Price_lm.transform_fit <- lm(log(Price) ~ ., data = dfPrice.post, subset = trainPrice)
Rating_lm.transform_fit <- lm(log(Rating) ~ ., data = dfRating.post, subset = trainRating)
Price.predict_transform <- predict.lm(Price_lm.transform_fit, dfPrice.post_test, type= "response")
Rating.predict_transform <- predict.lm(Rating_lm.transform_fit, dfRating.post_test, type="response")
Price_resid.transform <- dfPrice.post_test$Price - Price.predict_transform
Rating_resid.transform <- dfRating.post_test$Rating - Rating.predict_transform
plot(dfPrice.post_test$Price, Price_resid.transform, xlab = "Fitted values", ylab = "Residuals", main = "log(Price) Response")
plot(dfRating.post_test$Rating, Rating_resid.transform, xlab = "Fitted values", ylab = "Residuals", main = "log(Rating) Response")
mean((Price_resid.transform)^2)
mean((Rating_resid.transform)^2)
summary(Price_lm.transform_fit)
summary(Rating_lm.transform_fit)
Price_ridge.mod <- glmnet(dfPrice.post[trainPrice,], log(dfPrice.post$Price), alpha=0, lambda=grid,intercept=FALSE)
dfPrice.post[trainPrice]
dfPrice.post$Price[trainPrice]
Price_ridge.mod <- glmnet(dfPrice.post[trainPrice,], log(dfPrice.post$Price[trainPrice]), alpha=0, lambda=grid,intercept=FALSE)
Price_ridge.mod <- glmnet(dfPrice.post[trainPrice,], log(dfPrice.post$Price[trainPrice]), alpha=0, lambda=grid)
Price_ridge.mod <- glmnet(dfPrice.post[trainPrice,], log(dfPrice.post$Price[trainPrice]), alpha=0, lambda=10^seq(10, -2, length=100))
cv.out <- cv.glmnet(x[train,], y[train], nfolds = 10, lambda=10^seq(10, -2, length=100), alpha =0)
cv.out <- cv.glmnet(dfPrice.post[trainPrice,], log(dfPrice.post$Price[trainPrice]), nfolds = 10, lambda=10^seq(10, -2, length=100), alpha =0)
df <- read.csv("WineData.csv")
df <- na.omit(df)
df <- subset(df, select = -c(X, Id, Name, Winery, StyleName, Region))
df <- subset(df, Acidity != -1 & Year > 1950 & Country != "Mexico")
df <- subset(df, select = -c(Type, Vintage, Nat, Country, Size))
df$Type <- as.factor(df$Type)
df$Type <- model.matrix( ~ Type - 1, data=df)
df$Vintage <- as.factor(df$Vintage)
df$Vintage <- model.matrix( ~ Vintage - 1, data=df)
df$Nat <- as.factor(df$Nat)
df$Nat <- model.matrix( ~ Nat - 1, data=df)
df$Country = as.factor(df$Country)
df$Country <- model.matrix( ~ Country - 1, data=df)
df$Size <- as.factor(df$Size)
df$Size <- model.matrix( ~ Size - 1, data=df)
df <- read.csv("WineData.csv")
df <- na.omit(df)
df <- subset(df, select = -c(X, Id, Name, Winery, StyleName, Region))
df <- subset(df, Acidity != -1 & Year > 1950 & Country != "Mexico")
df <- subset(df, select = -c(Type, Vintage, Nat, Country, Size))
df$Type <- as.factor(df$Type)
df$Type <- model.matrix( ~ Type - 1, data=df)
df$Type <- as.factor(df$Type)
df <- read.csv("WineData.csv")
df$Type <- as.factor(df$Type)
df <- read.csv("WineData.csv")
df <- na.omit(df)
df <- subset(df, select = -c(X, Id, Name, Winery, StyleName, Region))
df <- subset(df, Acidity != -1 & Year > 1950 & Country != "Mexico")
df <- subset(df, select = -c(Type, Vintage, Nat, Country, Size))
df$Type <- as.factor(df$Type)
df <- read.csv("WineData.csv")
df <- na.omit(df)
df <- subset(df, select = -c(X, Id, Name, Winery, StyleName, Region))
df <- subset(df, Acidity != -1 & Year > 1950 & Country != "Mexico")
df <- subset(df, select = c(Type, Vintage, Nat, Country, Size))
df$Type <- as.factor(df$Type)
df$Type <- model.matrix( ~ Type - 1, data=df)
df$Vintage <- as.factor(df$Vintage)
df$Vintage <- model.matrix( ~ Vintage - 1, data=df)
df$Nat <- as.factor(df$Nat)
df$Nat <- model.matrix( ~ Nat - 1, data=df)
df$Country = as.factor(df$Country)
df$Country <- model.matrix( ~ Country - 1, data=df)
df$Size <- as.factor(df$Size)
df$Size <- model.matrix( ~ Size - 1, data=df)
df.Pricelm <- lm(Price ~ ., data=df)
df.Ratinglm <- lm(Rating ~ ., data = df)
dfPriceRes <- rstudent(df.Pricelm)
dfRatingRes <- rstudent(df.Ratinglm)
df.Pricelm <- lm(Price ~ ., data=df)
df <- read.csv("WineData.csv")
df <- na.omit(df)
df <- subset(df, select = -c(X, Id, Name, Winery, StyleName, Region))
df <- subset(df, Acidity != -1 & Year > 1950 & Country != "Mexico")
df <- read.csv("WineData.csv")
df <- na.omit(df)
df <- subset(df, select = -c(X, Id, Name, Winery, StyleName, Region))
df <- subset(df, Acidity != -1 & Year > 1950 & Country != "Mexico")
df$Type <- as.factor(df$Type)
df$Type <- model.matrix( ~ Type - 1, data=df)
df$Vintage <- as.factor(df$Vintage)
df$Vintage <- model.matrix( ~ Vintage - 1, data=df)
df$Nat <- as.factor(df$Nat)
df$Nat <- model.matrix( ~ Nat - 1, data=df)
df$Country = as.factor(df$Country)
df$Country <- model.matrix( ~ Country - 1, data=df)
df$Size <- as.factor(df$Size)
df$Size <- model.matrix( ~ Size - 1, data=df)
df.Pricelm <- lm(Price ~ ., data=df)
df.Ratinglm <- lm(Rating ~ ., data = df)
dfPriceRes <- rstudent(df.Pricelm)
dfRatingRes <- rstudent(df.Ratinglm)
dfPrice.post <- df[abs(dfPriceRes) < 3,]
dfRating.post <- df[abs(dfRatingRes) < 3,]
dfPrice.post <- na.omit(dfPrice.post)
dfRating.post <- na.omit(dfRating.post)
set.seed(1)
trainPrice <- sample(1:nrow(dfPrice.post), nrow(dfPrice.post) * 0.6)
trainRating <- sample(1:nrow(dfRating.post), nrow(dfRating.post) * 0.6)
Price_lm.fit <- glm(Price ~ ., data = dfPrice.post)
Rating_lm.fit <- lm(Rating ~ ., data = dfRating.post, subset = trainRating)
dfPrice.post_test <- dfPrice.post[-trainPrice,]
dfRating.post_test <- dfRating.post[-trainRating,]
Price.predict <- predict.lm(Price_lm.fit, dfPrice.post_test, type= "response")
Rating.predict <- predict.lm(Rating_lm.fit, dfRating.post_test, type="response")
mean((dfPrice.post_test$Price - Price.predict)^2)
mean((dfRating.post_test$Rating - Rating.predict)^2)
Price_resid <- dfPrice.post_test$Price - Price.predict
Rating_resid <- dfRating.post_test$Rating - Rating.predict
plot(dfPrice.post_test$Price, Price_resid, xlab = "Fitted values", ylab = "Residuals", main = "Price Response")
plot(dfRating.post_test$Rating, Rating_resid, xlab = "Fitted values", ylab = "Residuals", main = "Rating Response")
Price_lm.transform_fit <- lm(log(Price) ~ ., data = dfPrice.post, subset = trainPrice)
Rating_lm.transform_fit <- lm(log(Rating) ~ ., data = dfRating.post, subset = trainRating)
Price.predict_transform <- predict.lm(Price_lm.transform_fit, dfPrice.post_test, type= "response")
Rating.predict_transform <- predict.lm(Rating_lm.transform_fit, dfRating.post_test, type="response")
Price_resid.transform <- dfPrice.post_test$Price - Price.predict_transform
Rating_resid.transform <- dfRating.post_test$Rating - Rating.predict_transform
plot(dfPrice.post_test$Price, Price_resid.transform, xlab = "Fitted values", ylab = "Residuals", main = "log(Price) Response")
plot(dfRating.post_test$Rating, Rating_resid.transform, xlab = "Fitted values", ylab = "Residuals", main = "log(Rating) Response")
mean((Price_resid.transform)^2)
mean((Rating_resid.transform)^2)
summary(Price_lm.transform_fit)
mean((Rating_resid.transform)^2)
summary(Rating_lm.transform_fit)
Price_ridge.mod <- glmnet(dfPrice.post[trainPrice,], log(dfPrice.post$Price[trainPrice]), alpha=0, lambda=10^seq(10, -2, length=100))
Price_ridge.mod <- glmnet(dfPrice.post[trainPrice,], log(dfPrice.post$Price[trainPrice]), alpha=0, lambda=10^seq(10, -2, length=100))
trainPrice <- sample(1:nrow(dfPrice.post), nrow(dfPrice.post) * 0.6)
Price_ridge.mod <- glmnet(dfPrice.post[trainPrice,], log(dfPrice.post$Price[trainPrice]), alpha=0, lambda=10^seq(10, -2, length=100))
cv.out <- cv.glmnet(dfPrice.post[trainPrice,], log(dfPrice.post$Price[trainPrice]), nfolds = 10, lambda=10^seq(10, -2, length=100), alpha =0)
Price_ridge.mod <- glmnet(dfPrice.post[trainPrice,], log(dfPrice.post$Price[trainPrice]), alpha=1, lambda=10^seq(10, -2, length=100))
Price <- dfPrice.post[1]
dfPrice.post <- as.data.frame(scale(dfPrice.post[2:11]))
dfPrice.post <- cbind(Price, dfPrice.post)
Price_regfit.full <- regsubsets(log(Price) ~ ., data = dfPrice.post, nvmax = 30)
predict.regsubsets <- function(regfit, newdata, id, ...) {
mat <- model.matrix(formula(Salary~. + 0), newdata)
coefi <- coef(regfit, id=id)
xvars <- names(coefi)
as.matrix(mat[, xvars]) %*% coefi
}
k <- 5
set.seed(1)
folds <- sample(1:k, nrow(dfPrice.post), replace=TRUE)
cv_fn <- function(fold_id) {
cv.error <- rep(0, 19)
best.fit <- regsubsets(Salary~., data=dfPrice.post[folds != fold_id,], nvmax=25, intercept=T)
for (i in (1:19)) {
pred <- predict(best.fit, dfPrice.post[folds == fold_id,], id=i)
cv.error[i] <- mean((dfPrice.post$Price[folds == fold_id] - pred)^2)
}
return( cv.error )
}
cv.errors <- sapply(1:k, cv_fn) # 19xk matrix of errors
cv_fn <- function(fold_id) {
cv.error <- rep(0, 19)
best.fit <- regsubsets(log(Price)~., data=dfPrice.post[folds != fold_id,], nvmax=25, intercept=T)
for (i in (1:19)) {
pred <- predict(best.fit, dfPrice.post[folds == fold_id,], id=i)
cv.error[i] <- mean((dfPrice.post$Price[folds == fold_id] - pred)^2)
}
return( cv.error )
}
cv_fn <- function(fold_id) {
cv.error <- rep(0, 19)
best.fit <- regsubsets(log(Price)~., data=dfPrice.post[folds != fold_id,], nvmax=25, intercept=T)
for (i in (1:19)) {
pred <- predict(best.fit, dfPrice.post[folds == fold_id,], id=i)
cv.error[i] <- mean((dfPrice.post$Price[folds == fold_id] - pred)^2)
}
return( cv.error )
}
cv.errors <- sapply(1:k, cv_fn) # 19xk matrix of errors
k <- 5
set.seed(1)
folds <- sample(1:k, nrow(dfPrice.post), replace=TRUE)
predict.regsubsets <- function(regfit, newdata, id, ...) {
mat <- model.matrix(formula(log(Price)~. + 0), newdata)
coefi <- coef(regfit, id=id)
xvars <- names(coefi)
as.matrix(mat[, xvars]) %*% coefi
}
k <- 5
set.seed(1)
folds <- sample(1:k, nrow(dfPrice.post), replace=TRUE)
cv_fn <- function(fold_id) {
cv.error <- rep(0, 19)
best.fit <- regsubsets(log(Price)~., data=dfPrice.post[folds != fold_id,], nvmax=25, intercept=T)
for (i in (1:19)) {
pred <- predict(best.fit, dfPrice.post[folds == fold_id,], id=i)
cv.error[i] <- mean((dfPrice.post$Price[folds == fold_id] - pred)^2)
}
return( cv.error )
}
cv.errors <- sapply(1:k, cv_fn) # 19xk matrix of errors
plot(summary(Price_regfit.full)$adjr2, type="b", xlab="p", ylab=expression(R^2))
plot(summary(Rating_regfit.full)$adjr2, type = "b", xlab = "p", ylab = expression(R^2))
plot(summary(Price_regfit.full)$bic, type="b", xlab="p", ylab="BIC")
plot(summary(Price_regfit.full)$adjr2, type="b", xlab="p", ylab=expression(R^2))
plot(summary(Price_regfit.full)$bic, type="b", xlab="p", ylab="BIC")
plot(summary(Rating_regfit.full)$bic, type="b", xlab="p", ylab="BIC")
plot(summary(Price_regfit.full)$cp, type="b", xlab="p", ylab=expression(C[p]))
plot(summary(Rating_regfit.full)$cp, type="b", xlab="p", ylab=expression(C[p]))
plot(summary(Price_regfit.full)$adjr2, type="b", xlab="p", ylab=expression(R^2))
plot(summary(Rating_regfit.full)$adjr2, type = "b", xlab = "p", ylab = expression(R^2))
plot(summary(Price_regfit.full)$cp, type="b", xlab="p", ylab=expression(C[p]))
plot(summary(Price_regfit.full)$cp, type="b", xlab="p", ylab=expression(C[p]))
plot(summary(Rating_regfit.full)$cp, type="b", xlab="p", ylab=expression(C[p]))
plot(summary(Rating_regfit.full)$adjr2, type = "b", xlab = "p", ylab = expression(R^2))
plot(summary(Rating_regfit.full)$cp, type="b", xlab="p", ylab=expression(C[p]))
plot(summary(Rating_regfit.full)$adjr2, type = "b", xlab = "p", ylab = expression(R^2))
Price_regfit.full$xnames[5]
Price_regfit.full$xnames
coef(Price_regfit.full, 5)
plot(summary(Rating_regfit.full)$cp, type="b", xlab="p", ylab=expression(C[p]))
coef(Rating_regfit.full, 14)
adj_r2_max = which.max(Price_regfit.full$adjr2)
df <- read.csv("WineData.csv")
df <- na.omit(df)
df <- subset(df, select = -c(X, Id, Name, Winery, StyleName, Region))
df <- subset(df, Acidity != -1 & Year > 1950 & Country != "Mexico")
df$Type <- as.factor(df$Type)
df$Type <- model.matrix( ~ Type - 1, data=df)
df$Vintage <- as.factor(df$Vintage)
df$Vintage <- model.matrix( ~ Vintage - 1, data=df)
df$Nat <- as.factor(df$Nat)
df$Nat <- model.matrix( ~ Nat - 1, data=df)
df$Country = as.factor(df$Country)
df$Country <- model.matrix( ~ Country - 1, data=df)
df$Size <- as.factor(df$Size)
df$Size <- model.matrix( ~ Size - 1, data=df)
df.Pricelm <- lm(Price ~ ., data=df)
df.Ratinglm <- lm(Rating ~ ., data = df)
dfPriceRes <- rstudent(df.Pricelm)
dfRatingRes <- rstudent(df.Ratinglm)
dfPrice.post <- df[abs(dfPriceRes) < 3,]
dfRating.post <- df[abs(dfRatingRes) < 3,]
dfPrice.post <- na.omit(dfPrice.post)
dfRating.post <- na.omit(dfRating.post)
Price <- dfPrice.post[1]
dfPrice.post <- as.data.frame(scale(dfPrice.post[2:11]))
dfPrice.post <- cbind(Price, dfPrice.post)
Price_regfit.full <- regsubsets(log(Price) ~ ., data = dfPrice.post, nvmax = 30)
Rating_regfit.full <- regsubsets(log(Rating) ~ ., data = dfRating.post, nvmax = 30)
Price_adj_r2_max = which.max(Price_regfit.full$adjr2)
Price_adj_r2_max
which.max(Price_regfit.full$adjr2)
max(Price_regfit.full$adjr2)
Price_regfit.full$adjr2
Price_regfit.full <- regsubsets(log(Price) ~ ., data = dfPrice.post, nvmax = 30)
which.max(summary(Price_regfit.full$adjr2))
which.max(summary(Price_regfit.full)$adjr2)
which.min(summary(Price_regfit.full)$cp)
summary(Price_regfit.full)$adjr2[25]
summary(Price_regfit.full)$adjr2[23]
summary(Price_regfit.full)$cp[15]
summary(Price_regfit.full)$cp[23]
summary(Price_regfit.full)$cp[18]
summary(Price_regfit.full)$cp[23]
coef(Price_regfit.full, 23)
df <- read.csv("WineData.csv")
df <- na.omit(df)
df <- subset(df, select = -c(X, Id, Name, Winery, StyleName, Region))
df <- subset(df, Acidity != -1 & Year > 1950 & Country != "Mexico" & Country != "NONE")
df$Type <- as.factor(df$Type)
df$Type <- model.matrix( ~ Type - 1, data=df)
df$Vintage <- as.factor(df$Vintage)
df$Vintage <- model.matrix( ~ Vintage - 1, data=df)
df$Nat <- as.factor(df$Nat)
df$Nat <- model.matrix( ~ Nat - 1, data=df)
df$Country = as.factor(df$Country)
df$Country <- model.matrix( ~ Country - 1, data=df)
df$Size <- as.factor(df$Size)
df$Size <- model.matrix( ~ Size - 1, data=df)
df.Pricelm <- lm(Price ~ ., data=df)
df.Ratinglm <- lm(Rating ~ ., data = df)
dfPriceRes <- rstudent(df.Pricelm)
dfRatingRes <- rstudent(df.Ratinglm)
dfPrice.post <- df[abs(dfPriceRes) < 3,]
dfRating.post <- df[abs(dfRatingRes) < 3,]
dfPrice.post <- na.omit(dfPrice.post)
dfRating.post <- na.omit(dfRating.post)
Price <- dfPrice.post[1]
dfPrice.post <- as.data.frame(scale(dfPrice.post[2:11]))
dfPrice.post <- cbind(Price, dfPrice.post)
Price_regfit.full <- regsubsets(log(Price) ~ ., data = dfPrice.post, nvmax = 30)
Rating_regfit.full <- regsubsets(log(Rating) ~ ., data = dfRating.post, nvmax = 30)
plot(summary(Price_regfit.full)$adjr2, type="b", xlab="p", ylab=expression(R^2))
plot(summary(Rating_regfit.full)$adjr2, type = "b", xlab = "p", ylab = expression(R^2))
plot(summary(Price_regfit.full)$cp, type="b", xlab="p", ylab=expression(C[p]))
plot(summary(Rating_regfit.full)$cp, type="b", xlab="p", ylab=expression(C[p]))
which.max(summary(Price_regfit.full)$adjr2)
which.min(summary(Price_regfit.full)$cp)
summary(Price_regfit.full)$adjr2[23]
summary(Price_regfit.full)$adjr2[24]
summary(Price_regfit.full)$adjr2[23]
coef(Price_regfit.full, 23)
plot(summary(Price_regfit.full)$adjr2, type="b", xlab="p", ylab=expression(R^2))
plot(summary(Price_regfit.full)$adjr2, type="b", xlab="# of Predictors", ylab=expression(R^2), main = "Best Subset Selection of Price Regression - " + expression(R^2))
plot(summary(Price_regfit.full)$adjr2, type="b", xlab="# of Predictors", ylab=expression(R^2), main = "Best Subset Selection of Price Regression - R^2")
plot(summary(Price_regfit.full)$cp, type="b", xlab="p", ylab=expression(C[p]))
plot(summary(Price_regfit.full)$cp, type="b", xlab="p", ylab=expression(C[p]), main = "Best Subset Selection of Price Regression - Cp")
plot(summary(Rating_regfit.full)$adjr2, type = "b", xlab = "p", ylab = expression(R^2), main = "Best Subset Selection of Rating Regression - R^2")
plot(summary(Rating_regfit.full)$cp, type="b", xlab="p", ylab=expression(C[p]), main = "Best Subset Selection of Rating Regression - Cp")
which.max(summary(Price_regfit.full)$adjr2)
which.min(summary(Price_regfit.full)$cp)
coef(Price_regfit.full, 20)
summary(Price_regfit.full)$adjr2[23]
summary(Price_regfit.full)$adjr2[20]
summary(Price_regfit.full)$cp[23]
summary(Price_regfit.full)$cp[20]
summary(Price_regfit.full)$cp[23]
summary(Price_regfit.full)$cp[118]
summary(Price_regfit.full)$cp[18]
summary(Price_regfit.full)$cp[19]
coef(Price_regfit.full, 20)
which.max(summary(Rating_regfit.full)$adjr2)
which.min(summary(Rating_regfit.full)$cp)
test_mat = model.matrix (Salary~., data = dfPrice.post[trainPrice,])
test_mat = model.matrix (Price~., data = dfPrice.post[trainPrice,])
coefi = coef(Price_regfit_full, id = 20)
coefi = coef(Price_regfit.full, id = 20)
pred = test_mat[,names(coefi)]%*%coefi
test_mat = model.matrix (Price~., data = dfPrice.post[-trainPrice,])
coefi = coef(Price_regfit.full, id = 20)
pred = test_mat[,names(coefi)]%*%coefi
val_errors[i] = mean((test$Salary-pred)^2)
val_errors = mean((test$Salary-pred)^2)
val_errors = mean((dfPrice.post$Price[-trainPrice]-pred)^2)
Price_regfit.full <- regsubsets(log(Price) ~ ., data = dfPrice.post[trainPrice,], nvmax = 30)
test_mat = model.matrix (Price~., data = dfPrice.post[-trainPrice,])
coefi = coef(Price_regfit.full, id = 20)
pred = test_mat[,names(coefi)]%*%coefi
val_errors = mean((dfPrice.post$Price[-trainPrice]-pred)^2)
summary(Price_regfit.full)$adjr2[20]
summary(Price_regfit.full)$cp[20]
summary(Rating_regfit.full)$cp[24]
summary(Rating_regfit.full)$adjr2[24]
val_errors = mean((dfPrice.post$Price[-trainPrice]-pred)^2)
val_errors
Rating_regfit.full <- regsubsets(log(Rating) ~ ., data = dfRating.post[trainRating,], nvmax = 30)
trainRating <- sample(1:nrow(dfRating.post), nrow(dfRating.post) * 0.6)
Rating_regfit.full <- regsubsets(log(Rating) ~ ., data = dfRating.post[trainRating,], nvmax = 30)
which.max(summary(Rating_regfit.full)$adjr2)
which.min(summary(Rating_regfit.full)$cp)
which.max(summary(Rating_regfit.full)$adjr2)
which.min(summary(Rating_regfit.full)$cp)
Price_regfit.full <- regsubsets(log(Price) ~ ., data = dfPrice.post[trainPrice,], nvmax = 30)
which.max(summary(Price_regfit.full)$adjr2)
which.min(summary(Price_regfit.full)$cp)
test_mat = model.matrix (Price~., data = dfRating.post[-trainRating,])
coefi = coef(Rating_regfit.full, id = 20)
pred = test_mat[,names(coefi)]%*%coefi
val_errors = mean((dfRating.post$Rating[-trainRating]-pred)^2)
pred = test_mat[,names(coefi)]%*%coefi
test_mat = model.matrix (Rating~., data = dfRating.post[-trainRating,])
coefi = coef(Rating_regfit.full, id = 20)
pred = test_mat[,names(coefi)]%*%coefi
val_errors = mean((dfRating.post$Rating[-trainRating]-pred)^2)
val_errors
summary(Rating_regfit.full)$adjr2[20]
